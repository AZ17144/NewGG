#include "chess.h"
 
/*

static sint16 RpaoAttScore(int chess1, int chess2){    //炮可攻击对方的棋子, 或保护自己的棋子的得分	
	switch(chess1){
		// ///////////////////////////////////////////////////////////////////////	
		case EMPTY:
			//这个不太可能	
			return 0;
			break;
		// ///////////////////////////////////////////////////////////////////////	
		case RCHE:	{	// 第1个棋子是  红炮 红车 X
			const sint16 Rpao_Rche_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮       兵
				0,        0,       0,     0,     16,     4,       8,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,       24,      24,     24,     0,     16,       8,	         //黑棋
			};
				
		    return Rpao_Rche_X_Score[chess2];

					}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case RMA:	{	// 第1个棋子是  红炮 红马 X
			const sint16 Rpao_Rma_X_Score[16] = {		
				//
				0,
				//将      仕      相      马      车      炮      兵
				0,        0,      4,    16,     16,     4,      4,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        8,      8,     8,      0,     0,       8,	         //黑棋
			};
				
		    return Rpao_Rma_X_Score[chess2];
					}
			break;
		// ///////////////////////////////////////////////////////////////////////	
		case RPAO:		{// 第1个棋子是  红炮 红炮 X
			const sint16 Rpao_Rpao_X_Score[16] = {		
				//
				0,
				//将      仕      相      马      车       炮       兵
				0,        0,      4,     8,     16,       0,      4,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        8,      8,     8,      0,       0,       8,	         //黑棋
			};				
		    return Rpao_Rpao_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case RXIANG:	{// 第1个棋子是  红炮 红相 X
			const sint16 Rpao_Rxiang_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮       兵
				0,        0,     -4,     16,     16,       8,       0,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,       16,     16,     16,     0,       0,      32,	         //黑棋
				
			};
				
		    return Rpao_Rxiang_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case RSHI:	{	// 第1个棋子是  红炮 红仕 X
			const sint16 Rpao_Rshi_X_Score[16] = {		
				//
				0,
				//将      仕      相       马       车       炮       兵
				0,       -8,       0,      0,     16,      8,     0,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,       16,      16,     16,      0,      0,     48,	         //黑棋
				
			};
				
		    return Rpao_Rshi_X_Score[chess2];
					}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case RKING:		{// 第1个棋子是  红炮 红将 X
			const sint16 Rpao_Rking_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮       兵
				0,        8,      8,      0,     16,       0,       0,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,       16,      16,     16,      0,       0,       8,	         //黑棋
				
			};
				
		    return Rpao_Rking_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case RPAWN:		{// 第1个棋子是  红炮 红兵 X
			const sint16 Rpao_Rpawn_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮      兵
				0,        0,       0,     16,     16,     8,      8,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,       16,      16,     16,     16,     0,      8,	         //黑棋
				
			};
			return Rpao_Rpawn_X_Score[chess2];
						}
			break;
			// **************************************************************
		// ///////////////////////////////////////////////////////////////////////		
		case BCHE:		{// 第1个棋子是  红炮 黑车 X
			const sint16 Rpao_Bche_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮       兵
				0,        0,       0,      0,      0,       0,       0,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        0,       0,      0,      0,       0,       0,	         //黑棋
				
			};
			return Rpao_Bche_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case BMA:		{// 第1个棋子是  红炮 黑马 X
			const sint16 Rpao_Bma_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮       兵
				0,        0,       0,      0,      0,       0,       0,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        0,       0,     16,      0,       0,       0,	         //黑棋
				
			};
			return Rpao_Bma_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case BPAO:		{// 第1个棋子是  红炮 黑炮 X
			const sint16 Rpao_Bpao_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮       兵
				0,        0,       0,      0,      0,       0,       0,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        0,       0,     16,      0,       0,       0,	         //黑棋
				
			};
			return Rpao_Bpao_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case BXIANG:	{// 第1个棋子是  红炮 黑相 X
			const sint16 Rpao_Bxiang_X_Score[16] = {		
				//
				0,
				//将      仕      相       马      车       炮       兵
				0,        0,       0,     16,      0,       8,       8,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        0,       0,     16,      0,       0,       0,	         //黑棋
				
			};
			return Rpao_Bxiang_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case BSHI:	{	// 第1个棋子是  红炮 黑仕 X
			const sint16 Rpao_Bshi_X_Score[16] = {		
				//
				0,
				//将      仕      相      马       车       炮       兵
				0,        0,       0,     16,     24,       8,       8,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        0,       0,     16,     24,       0,       8,	         //黑棋
				
			};
			return Rpao_Bshi_X_Score[chess2];
					}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case BKING:		{// 第1个棋子是  红炮 黑将 X
			const sint16 Rpao_Bking_X_Score[16] = {		
				//
				0,
				//将      仕      相      马       车       炮       兵
				0,        0,       0,      0,      0,     -16,       0,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        0,       0,     16,     24,       0,       8,	         //黑棋
				
			};
			return Rpao_Bking_X_Score[chess2];
						}
			break;
		// ///////////////////////////////////////////////////////////////////////		
		case BPAWN:	{	// 第1个棋子是  红炮 黑兵 X
			const sint16 Rpao_Bpawn_X_Score[16] = {		
				//
				0,
				//将      仕      相      马      车       炮       兵
				0,        0,      0,      0,      0,       0,     8,	         //红棋  //因为炮保炮是双方的，所以得减半哇
				0,
				0,        0,      0,     16,     16,       0,     0,	         //黑棋
				
			};
			return Rpao_Bpawn_X_Score[chess2];
					}
			break;
		default:
			return  0;
			break;
	}

}


void InitPaoThree(void){
	int a;
	int b;
	int c;
	//return; 
	for(a = 0; a < 16; a++){
		for(b = 0; b < 16; b++){
			for(c = 0; c < 16; c++){	
				//if(a == 11 && b == 10 && c == 9){
				//	a = a;
				//}
				sint16 result = 0;
				// ////////////////////////////////////////////////////////////
				// 下面只算红方 的情况
				// ////////////////////////////////////////////////////////////
				// 1, 如果第三个棋子是空
				switch(c){
					// 第三个棋子是  红炮 a b EMPTY // **********************************************************************************************
					case EMPTY:  //*********************************************************
						// 这儿看一下炮能不能保护自己的棋子 
						result += RpaoAttScore(a,b);
						break;
					// 第三个棋子是  红炮 a b 红车 // **********************************************************************************************
					case RCHE:	{ //*********************************************************
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:
							//   //////////////////////////////////////////////////////////
								break;
							//   //////////////////////////////////////////////////////////
							case RMA: {  // 红炮 a 红马 红车 
									const sint16 红炮_x_红马_红车[16] = {		
										//
										0,
									   //将      仕      相      马      车      炮       兵
									    0,       0,      0,      0,      0,      8,       0,	     //红棋 
										0,
									    0,       0,      0,      0,      0,      0,       0,	     //黑棋
										
									};
									result += 红炮_x_红马_红车[a];
								}
								break;
							case RPAO:{	  // 红炮 a 红炮 红车 
								const sint16 红炮_x_红炮_红车[16] = {		
									//
									0,
									//将      仕      相      马      车      炮       兵
									0,       0,      0,      0,      0,      0,       0,	     //红棋 
									0,
									0,       0,      0,      0,      0,      0,       0,	     //黑棋
									
								};
								result += 红炮_x_红炮_红车[a];
									  }
								break;
							case RXIANG:{	// 红炮 a 红相 红车 
								const sint16 红炮_x_红相_红车[16] = {		
									//
									0,
								  //将      仕      相      马      车      炮       兵
									0,       0,      0,      0,      0,      0,       0,	     //红棋 
									0,
									0,       0,      0,      0,      0,      0,       0,	     //黑棋
									
								};
								result += 红炮_x_红相_红车[a];
										}
								break;
							case RSHI:{		// 红炮 a 红仕 红车 
								const sint16 红炮_x_红仕_红车[16] = {		
									//
									0,
								  //将      仕      相      马      车      炮       兵
									0,       0,      0,      0,      0,      0,       0,	     //红棋
									0,
									0,       0,      0,      0,      0,      0,       0,	     //黑棋
									
								};
								result += 红炮_x_红仕_红车[a];
									  }
								break;
							case RKING:{
									   }
								break;
							case RPAWN:{	// 红炮 a 红兵 红车 
								const sint16 红炮_x_红兵_红车[16] = {		
									//
									0,
								  //将      仕      相      马      车      炮       兵
									0,       0,      0,      0,      0,      0,       0,	     //红棋 
									0,
									0,       0,      0,      0,      0,      0,       0,	     //黑棋
									
								};
								result += 红炮_x_红兵_红车[a];
									   }
								break;
								//*****************************************************
							case BCHE:{		// 红炮 a 黑车 红车 
								const sint16 红炮_x_黑车_红车[16] = {		
									//
									0,
								  //将      仕      相      马      车      炮       兵
									0,       0,      0,      0,      0,      0,       0,	     //红棋 
									0,
									0,       0,      0,      0,      0,      0,       0,	     //黑棋
									
								};
								result += 红炮_x_黑车_红车[a];
									  }
								break;
							case BMA:{      // 红炮 a 黑马 红车 
								const sint16 红炮_x_黑马_红车[16] = {		
									//
									0,
								  //将      仕      相      马      车      炮       兵
									0,      16,     16,     16,     16,     16,      16,	     //红棋 
									0,
								   32,      16,     16,     16,      0,      0,      16,	     //黑棋
									
								};
								result += 红炮_x_黑马_红车[a];
									 }
								break;
							case BPAO:{		// 红炮 a 黑马 红车 
									  }
								break;
							case BXIANG:{
										}
								break;
							case BSHI:
								break;
							case BKING:{
								//const sint16 红炮_x_黑马_红车[16] = {		
								//	//
								//	0,
								//  //将      仕      相      马      车      炮       兵
								//	0,      16,     16,     16,     16,     16,      16,	     //红棋 
								//   32,      16,     16,     16,      0,      0,      16,	     //黑棋
								//	0,
								//};
								//result += 红炮_x_黑马_红车[a];
									   }
								break;
							case BPAWN:
								break;
							default:
								break;
						}
						}
						break;
					// 第三个棋子是  红炮 a b 红马 // **********************************************************************************************
					case RMA:  {  //*********************************************************
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:
								break;
							case RMA:
								break;
							case RPAO:
								break;
							case RXIANG:
								break;
							case RSHI:
								break;
							case RKING:
								break;
							case RPAWN:
								break;
								//*****************************************************
							case BCHE:
								break;
							case BMA:
								break;
							case BPAO:
								break;
							case BXIANG:
								break;
							case BSHI:
								break;
							case BKING:
								break;
							case BPAWN:
								break;
							default:
								break;
						}
							   }
						break;
					// 第三个棋子是  红炮 a b 红炮 // **********************************************************************************************
					case RPAO: {  //*********************************************************
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:
								break;
							case RMA:
								break;
							case RPAO:
								break;
							case RXIANG:
								break;
							case RSHI:
								break;
							case RKING:
								break;
							case RPAWN:
								break;
								//*****************************************************
							case BCHE:
								break;
							case BMA:
								break;
							case BPAO:
								break;
							case BXIANG:
								break;
							case BSHI:
								break;
							case BKING:
								break;
							case BPAWN:
								break;
							default:
								break;
						}
							   }
						break;
					// 第三个棋子是  红炮 a b 红相 // **********************************************************************************************
					case RXIANG: {
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:
								break;
							case RMA:   //红炮 a 红马 红相 //
								{
									const sint8 Rpao_x_Rma_Rxiang[16] = {		
										//
										0,
										//将      仕      相       马      车      炮       兵
										-8,      -8,     -8,     -8,     -8,     -8,      0,	     //红棋 
										 0,
										 0,        0,     0,       0,      0,     0,      0,	     //黑棋

									};
									result += Rpao_x_Rma_Rxiang[a];
								}
								break;
							case RPAO:
								break;
							case RXIANG:
								break;
							case RSHI:
								break;
							case RKING:
								break;
							case RPAWN:
								break;
								//*****************************************************
							case BCHE:
								break;
							case BMA:
								break;
							case BPAO:
								break;
							case BXIANG:
								break;
							case BSHI:
								break;
							case BKING:
								break;
							case BPAWN:
								break;
							default:
								break;
						}
								 }
						break;
					// 第三个棋子是  红炮 a b 红仕 // **********************************************************************************************
					case RSHI: {
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:
								break;
							case RMA:
								break;
							case RPAO:
								break;
							case RXIANG:
								break;
							case RSHI:
								break;
							case RKING:
								break;
							case RPAWN:
								break;
								//*****************************************************
							case BCHE:
								break;
							case BMA:
								break;
							case BPAO:
								break;
							case BXIANG:
								break;
							case BSHI:
								break;
							case BKING:
								break;
							case BPAWN:
								break;
							default:
								break;
						}
							   }
						break;
					// 第三个棋子是  红炮 a b 红将
					case RKING:	{				//搞了自己的棋子,意义不大
						                        // **********************************************************************************************
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:
								break;
							case RMA:   // 第三个棋子是  红炮 a b 红将
								break;
							case RPAO:
								break;
							case RXIANG:
								break;
							case RSHI:
								break;
							case RKING:
								break;
							case RPAWN:
								break;
								//*****************************************************
							case BCHE:
								break;
							case BMA:
								break;
							case BPAO:
								break;
							case BXIANG:
								break;
							case BSHI:
								break;
							case BKING:
								break;
							case BPAWN:
								break;
							default:
								break;
						}
								}
						break;
					// 第三个棋子是  红炮 a b 红兵
					case RPAWN: {                 // **********************************************************************************************
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:
								break;
							case RMA:
								break;
							case RPAO:
								break;
							case RXIANG:{
								
										}
								break;
							case RSHI:
								break;
							case RKING:
								break;
							case RPAWN:
								break;
								//*****************************************************
							case BCHE:
								break;
							case BMA:
								break;
							case BPAO:
								break;
							case BXIANG:
								break;
							case BSHI:
								break;
							case BKING:
								break;
							case BPAWN:
								break;
							default:
								break;
						}
								}
						break;
					// **************************************************************
					// 第三个棋子是  红炮 a b 黑车 
					case BCHE:  {                  // **********************************************************************************************
						//result += RpaoAttScore(a,b);

						//这儿要判断一下是不是丝线牵牛
						switch(b){
							//   //////////////////////////////////////////////////////////
							case RCHE:  // 红炮 a 红车 黑车 
								//这个是对车
								break;
							//   //////////////////////////////////////////////////////////
							case RMA:   // 红炮 a 红马 黑车 								
								{
									const sint16 Rpao_x_Rma_Bche[16] = {		
										//
										0,
									   //将      仕      相       马      车      炮       兵
									    0,      -24,      0,     -32,     -8,     8,       8,	     //红棋 
										0,
									   32,       16,     16,       0,      0,     0,      16,	     //黑棋
										
									};

									result += Rpao_x_Rma_Bche[a];
								}
								break;
							//   //////////////////////////////////////////////////////////
							case RPAO:   // 红炮 a 红炮 黑车 
								{
									const sint16 Rpao_x_Rpao_Bche[16] = {		
										//
										0,
										//将      仕      相      马      车       炮       兵
									     0,       0,      32,    -16,      0,       0,      16,	     //红棋 
										 0,
									    32,      16,      32,     16,      0,      16,      16,	     //黑棋
										
									};

									result += Rpao_x_Rpao_Bche[a];
								}
								break;
							//   //////////////////////////////////////////////////////////
							case RXIANG:  // 红炮 a 红相 黑车 
								{
									const sint16 Rpao_x_Rxiang_Bche[16] = {		
										//
										0,
										//将      仕      相       马      车       炮       兵
									    0,        0,     -16,      0,      0,       0,       0,	     //红棋 
										0,
										0,        0,       0,      0,      0,       0,       0,	     //黑棋
										
									};

									result += Rpao_x_Rxiang_Bche[a];
								}
								break;
							//   //////////////////////////////////////////////////////////
							case RSHI:{   // 红炮 a 红仕 黑车 
								const sint16 Rpao_x_Rshi_Bche[16] = {		
									//
									0,
									//将      仕      相       马      车       炮       兵
									0,       -16,    -16,      0,      0,       0,       0,	     //红棋 
									0,
									0,        0,       0,      0,      0,       0,       0,	     //黑棋
									
								};
								result += Rpao_x_Rshi_Bche[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case RKING:  {//这个不太可能 // 红炮 a 红帅 黑车 
										 }
								break;
							//   //////////////////////////////////////////////////////////
							case RPAWN: {               // 红炮 a 红兵 黑车 
								const sint16 Rpao_x_Rpawn_Bche[16] = {		
									//
									0,
									//将      仕      相       马      车       炮       兵
									0,       16,      16,     16,      0,       0,      16,	     //红棋 
									0,
									0,       16,      16,     16,      0,      16,      16,	     //黑棋
									
								};
								result += Rpao_x_Rpawn_Bche[a];
										}
								break;
							//*****************************************************
							//   //////////////////////////////////////////////////////////
							case BCHE:  {         // 红炮 a 黑车 黑车 
								const sint16 Rpao_x_Bche_Bche[16] = {		
									//
									0,
									//将      仕      相       马      车      炮      兵
									0,       64,      64,     32,      0,    32,      64,	     //红棋 
									0,
									64,      64,      64,     64,      0,    64,      64,	     //黑棋
									
								};
								result += Rpao_x_Bche_Bche[a];
										}
								break;
							//   //////////////////////////////////////////////////////////
							case BMA:{			// 红炮 a 黑马 黑车 
								const sint16 Rpao_x_Bma_Bche[16] = {		
									//
									0,
									//将      仕      相      马     车      炮      兵
									16,      96,     96,     96,    96,    96,    80,	     //红棋 
									0,
									96,      96,      96,    96,   32,     96,    64,	     //黑棋
									
								};
								result += Rpao_x_Bma_Bche[a];
									 }
								break;
							//   //////////////////////////////////////////////////////////
							case BPAO: {        // 红炮 a 黑炮 黑车 
								const sint16 Rpao_x_Bpao_Bche[16] = {		
									//
									0,
									//将     仕      相      马      车      炮      兵
								   -32,       0,     0,    -16,     80,      0,      0,	     //红棋 
								     0,
									 0,       0,     0,      0,      0,      0,      0,	     //黑棋
									 
								};
								result += Rpao_x_Bpao_Bche[a];
									   }
								break;
							//   //////////////////////////////////////////////////////////
							case BXIANG:{   // 红炮 a 黑相 黑车 
								const sint16 Rpao_x_Bxiang_Bche[16] = {		
									//
									0,
									//将     仕     相     马      车      炮      兵
								     0,      0,    16,     16,     32,     32,     16,	     //红棋 
									 0,
									32,     16,    32,     16,      0,     16,      0,	     //黑棋
									
								};
								result += Rpao_x_Bxiang_Bche[a];
										}
								break;
							//   //////////////////////////////////////////////////////////
							case BSHI:{   // 红炮 a 黑仕 黑车 
								const sint16 Rpao_x_Bshi_Bche[16] = {		
									//
									0,
									//将     仕     相     马      车      炮      兵
								     0,      0,    16,     16,     64,     32,     32,	     //红棋 
									 0,
									32,     16,    16,     16,      0,     16,      0,	     //黑棋
									 
								};
								result += Rpao_x_Bshi_Bche[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case BKING:    // 红炮 a 黑将 黑车 
								break;
							//   //////////////////////////////////////////////////////////
							case BPAWN: {   // 红炮 a 黑兵 黑车 
								const sint16 Rpao_x_Bshi_Bche[16] = {		
									//
									0,
									//将     仕    相     马     车      炮      兵
									0,      16,    16,    0,     16,     32,     16,	     //红棋 
									0,
									32,     16,    16,    16,     0,      8,     -8,	     //黑棋
									
								};
								result += Rpao_x_Bshi_Bche[a];
										}
								break;
							default:
								break;
						}
						}
						break;
					// 第三个棋子是  红炮 a b 黑马 //************************************************************************************************
					case BMA: {
						//result += RpaoAttScore(a,b);
						switch(b){
							//   //////////////////////////////////////////////////////////
							case RCHE:    {   // 红炮 a 红车 黑马 
								const sint16 Rpao_x_Rche_Bma[16] = {		
									//
									0,
									//将     仕    相     马     车     炮       兵
									0,       0,     0,   16,    16,     16,      16,	 //红棋 
									0,
									32,     16,    16,   16,     0,     16,      16,	 //黑棋
									
								};
								result += Rpao_x_Rche_Bma[a];
										  }
								break;
							//   //////////////////////////////////////////////////////////
							case RMA: {	     // 红炮 a 红马 黑马 //这个是马可能吃相打马
								const sint16 Rpao_x_Rma_Bma[16] = {		
									//
									0,
								  //将     仕    相    马     车      炮     兵
									0,    0,    16,   16,    16,    16,   32,	 //红棋 
									0,
									0,    16,    16,   16,     0,   16,   0,	 //黑棋
									
								};
								result += Rpao_x_Rma_Bma[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case RPAO:{		// 红炮 a 红炮 黑马 //弹子炮
								const sint16 Rpao_x_Rpao_Bma[16] = {		
									//
									0,
									//将     仕    相    马     车      炮       兵
									0,       0,    16,   16,    16,      0,      16,	 //红棋 
									0,
									0,      16,    16,   16,     0,     16,       8,	 //黑棋
									
								};
								result += Rpao_x_Rpao_Bma[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case RXIANG: {	// 红炮 a 红相 黑马 //
								const sint16 Rpao_x_Rxiang_Bma[16] = {		
									//
									0,
									//将     仕    相    马     车     炮       兵
									0,       0,     0,    0,    0,     16,       8,	 //红棋 
									0,
									0,       0,     0,    0,    0,      0,       0,	 //黑棋
									
								};
								result += Rpao_x_Rxiang_Bma[a];
										 }
								break;
							//   //////////////////////////////////////////////////////////
							case RSHI:{		// 红炮 a 红仕 黑马 //
								const sint16 Rpao_x_Rshi_Bma[16] = {		
									//
									0,
									//将     仕    相    马     车     炮       兵
									0,       0,     0,    0,    0,     16,       0,	 //红棋 
									0,
									0,       0,     0,    0,    0,      0,       0,	 //黑棋
									
								};
								result += Rpao_x_Rshi_Bma[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case RKING:  {    // 红炮 a 红帅 黑马 //
								const sint16 Rpao_x_Rking_Bma[16] = {		
									//
									0,
									//将     仕    相    马     车     炮       兵
									0,       0,     0,    0,    0,      0,       0,	 //红棋
									0,
									0,       0,     0,    0,    0,      0,       0,	 //黑棋
									
								};
								result += Rpao_x_Rking_Bma[a];
										 }
								break;
							//   //////////////////////////////////////////////////////////
							case RPAWN:  {	 // 红炮 a 红兵 黑马 //
								const sint16 Rpao_x_Rpawn_Bma[16] = {		
									//
									0,
									//将     仕    相    马     车     炮       兵
									0,       0,     0,    0,    0,     16,      8,	 //红棋 
									0,
									0,       0,     0,    0,    0,      0,      0,	 //黑棋
									
								};
								result += Rpao_x_Rpawn_Bma[a];
										 }
								break;
								//*****************************************************
							//   //////////////////////////////////////////////////////////
							case BCHE:{		 // 红炮 a 黑车 黑马 //
								const sint16 Rpao_x_Bche_Bma[16] = {		
									//
									0,
									//将     仕    相    马     车     炮      兵
									0,      16,    16,    0,    0,     0,      8,	 //红棋 
									0,
								   32,      16,    16,    0,    0,     8,     16,	 //黑棋
									
								};
								result += Rpao_x_Bche_Bma[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case BMA:{      // 红炮 a 黑马 黑马 //
								const sint16 Rpao_x_Bma_Bma[16] = {		
									//
									0,
									//将     仕    相    马     车     炮      兵
									0,      16,    16,   16,   32,    16,     16,	 //红棋 
									0,
								   32,      16,    16,    0,    0,    16,     16,	 //黑棋
									
								};
								result += Rpao_x_Bma_Bma[a];
									 }
								break;
							//   //////////////////////////////////////////////////////////
							case BPAO:{		// 红炮 a 黑炮 黑马 //
								const sint16 Rpao_x_Bpao_Bma[16] = {		
									//
									0,
								  //将     仕    相    马    车     炮      兵
									0,     0,    0,    0,     0,     0,      0,	 //红棋 
									0,
								    0,     0,    0,    0,     0,     0,      0,	 //黑棋
									
								};
								result += Rpao_x_Bpao_Bma[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case BXIANG:{	// 红炮 a 黑象 黑马 //
								const sint16 Rpao_x_Bxiang_Bma[16] = {		
									//
									0,
								  //将     仕    相    马    车     炮      兵
									0,     0,   16,   16,    24,    24,     8,	 //红棋 
									0,
								    0,    16,   16,    0,     0,     0,     0,	 //黑棋
									
								};
								result += Rpao_x_Bxiang_Bma[a];
										}
								break;
							//   //////////////////////////////////////////////////////////
							case BSHI:{		// 红炮 a 黑仕 黑马 //
								const sint16 Rpao_x_Bxiang_Bma[16] = {		
									//
									0,
								  //将     仕    相    马    车     炮      兵
									0,     0,    0,   16,    24,    24,     8,	 //红棋 
									0,
								    0,    16,   16,    0,     0,     0,     0,	 //黑棋
									
								};
								result += Rpao_x_Bxiang_Bma[a];
									  }
								break;
							//   //////////////////////////////////////////////////////////
							case BKING:{    // 红炮 a 黑将 黑马 //			//这个不可能
								const sint16 Rpao_x_Bking_Bma[16] = {		
									//
									0,
								  //将   仕   相    马     车     炮      兵
									0,   0,   0,   0,     0,     0,     0,	 //红棋 
									0,
								    0,   0,   0,   0,     0,     0,     0,	 //黑棋
									
								};
								result += Rpao_x_Bking_Bma[a];
									   }
								break;
							//   //////////////////////////////////////////////////////////
							case BPAWN:{   // 红炮 a 黑兵 黑马 //			//这个不可能
								const sint16 Rpao_x_Bpawn_Bma[16] = {		
									//
									0,
								  //将     仕    相    马    车     炮      兵
									0,     0,    0,    0,    16,    16,     8,	 //红棋 
									0,
								    0,    16,   16,    8,     0,     8,     0,	 //黑棋
									
								};
								result += Rpao_x_Bpawn_Bma[a];
									   }
								break;
							default:
								break;
						}
						}
						break;
					// 第三个棋子是  红炮 a b 黑炮  // **********************************************************************************************
					case BPAO: {
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:{	   // 红炮 a 红车 黑炮				//
								const sint16 红炮_x_红车_黑炮[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
									 0,
									 0,    0,    0,   16,    0,    16,     0,	     //黑棋
									
								};
								result += 红炮_x_红车_黑炮[a];
									  }
								break;
							case RMA:{		// 红炮 a 红马 黑炮				//
								const sint16 红炮_x_红马_黑炮[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
									 0,
									 0,    0,   16,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红马_黑炮[a];
									 }
								break;
							case RPAO:{		// 红炮 a 红炮 黑炮				//
								const sint16 红炮_x_红炮_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_红炮_黑炮[a];
									  }
								break;
							case RXIANG:{	// 红炮 a 红相 黑炮				//
								const sint16 红炮_x_红相_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_红相_黑炮[a];
										}
								break;
							case RSHI:{		// 红炮 a 红仕 黑炮				//
								const sint16 红炮_x_红仕_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_红仕_黑炮[a];
									  }
								break;
							case RKING:{
									   }
								break;
							case RPAWN:{	// 红炮 a 红兵 黑炮				//
								const sint16 红炮_x_红兵_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_红兵_黑炮[a];
									   }
								break;
								//*****************************************************
							case BCHE:{		// 红炮 a 黑车 黑炮				//
								const sint16 红炮_x_黑车_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_黑车_黑炮[a];
									  }
								break;
							case BMA:{		// 红炮 a 黑马 黑炮				//
								const sint16 红炮_x_黑马_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,   16,   16,    0,    0,     0,    16,	     //红棋 
									0,
									0,   16,   16,   16,    0,    16,    16,	     //黑棋
									
								};
								result += 红炮_x_黑马_黑炮[a];
									 }
								break;
							case BPAO:{		// 红炮 a 黑炮 黑炮				//
								const sint16 红炮_x_黑炮_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_黑炮_黑炮[a];
									  }
								break;
							case BXIANG:{	// 红炮 a 黑相 黑炮				//
								const sint16 红炮_x_黑相_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_黑相_黑炮[a];
										}
								break;
							case BSHI:{		// 红炮 a 黑仕 黑炮				//
								const sint16 红炮_x_黑仕_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_黑仕_黑炮[a];
									  }
								break;
							case BKING:{	// 红炮 a 黑将 黑炮				//
								const sint16 红炮_x_黑将_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_黑将_黑炮[a];
									   }
								break;
							case BPAWN:{    // 红炮 a 黑将 黑炮				//
								const sint16 红炮_x_黑兵_黑炮[16] = {		
									//
									0,
								  //将   仕    相    马    车     炮      兵
									0,    0,    0,    0,    0,     0,     0,	     //红棋 
									0,
									0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_黑兵_黑炮[a];
									   }
								break;
							default:
								break;
						}
						}
						break;
					// 第三个棋子是  红炮 a b 黑相 // **********************************************************************************************
					case BXIANG: {
						switch(b){
							case RCHE:{		// 红炮 a 红车 黑象				//
								const sint16 红炮_x_红车_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,   16,   16,    8,    24,    16,	     //红棋 
									 0,
									 0,    0,   16,   16,    0,    16,     8,	     //黑棋
									
								};
								result += 红炮_x_红车_黑象[a];
									  }
								break;
							case RMA:{		// 红炮 a 红马 黑象				//
								const sint16 红炮_x_红马_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    8,   16,    8,    24,    16,	     //红棋 
									 0,
									 0,    0,    8,    8,    0,     0,     8,	     //黑棋
									 
								};
								result += 红炮_x_红马_黑象[a];
									 }
								break;
							case RPAO:{		// 红炮 a 红炮 黑象				//
								const sint16 红炮_x_红炮_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,   16,   16,   16,     0,    16,	     //红棋 
									 0,
									 0,    0,   16,    8,    0,     0,    16,	     //黑棋
									
								};
								result += 红炮_x_红炮_黑象[a];
									  }
								break;
							case RXIANG:{	// 红炮 a 红相 黑象				//
								const sint16 红炮_x_红相_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,    16,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红相_黑象[a];
										}
								break;
							case RSHI:{		// 红炮 a 红仕 黑象				//
								const sint16 红炮_x_红仕_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
								     0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									
								};
								result += 红炮_x_红仕_黑象[a];
									  }
								break;
							case RKING:{	// 红炮 a 红将 黑象				//
								
									   }
								break;
							case RPAWN:{	// 红炮 a 红兵 黑象				//
								const sint16 红炮_x_红兵_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,    24,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红兵_黑象[a];
									   }
								break;
								//*****************************************************
							case BCHE:{		// 红炮 a　黑车 黑象				//
								const sint16 红炮_x_黑车_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    8,   16,    0,    0,    16,     8,	     //红棋 
									 0,
									 0,    0,    8,    8,    0,     0,     8,	     //黑棋
									 
								};
								result += 红炮_x_黑车_黑象[a];
									  }
								break;
							case BMA:{		// 红炮 a　黑马 黑象				//
								const sint16 红炮_x_黑马_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,   16,   16,   16,    16,    16,	     //红棋 
									 0,
									 0,    0,   16,    8,    0,     0,     8,	     //黑棋
									 
								};
								result += 红炮_x_黑马_黑象[a];
									 }
								break;
							case BPAO:{	     // 红炮 a　黑马 黑象				//
								const sint16 红炮_x_黑炮_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑炮_黑象[a];
									  }
								break;
							case BXIANG:{	 // 红炮 a　黑象 黑象				//
								const sint16 红炮_x_黑象_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,   16,   16,    16,    16,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑象_黑象[a];
										}
								break;
							case BSHI:{		 // 红炮 a　黑仕 黑象				//
								const sint16 红炮_x_黑仕_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,   16,   16,    16,    16,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑仕_黑象[a];
									  }
								break;
							case BKING:
								break;
							case BPAWN:{	 // 红炮 a　黑兵 黑象				//	
								const sint16 红炮_x_黑兵_黑象[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,    16,    16,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑兵_黑象[a];
									   }
								break;
							default:
								break;
						}
						}
						break;
					// 第三个棋子是  红炮 a b 黑仕 // **********************************************************************************************
					case BSHI: {
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:{		// 红炮 a 红车 黑仕				//	
								const sint16 红炮_x_红车_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									16,   16,   16,   16,   16,    16,    16,	     //红棋 
									 0,
									 0,   16,    0,   16,    0,    16,    16,	     //黑棋
									 
								};
								result += 红炮_x_红车_黑仕[a];
									  }
								break;
							case RMA:{	 // 红炮 a 红马 黑仕				//	
								const sint16 红炮_x_红马_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,   16,    16,    16,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红马_黑仕[a];
									 }
								break;
							case RPAO:{	  // 红炮 a 红炮 黑仕				//	
								const sint16 红炮_x_红炮_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红炮_黑仕[a];
									  }
								break;
							case RXIANG:{	 // 红炮 a 红相 黑仕				//	
								const sint16 红炮_x_红相_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红相_黑仕[a];
										}
								break;
							case RSHI:{		// 红炮 a 红仕 黑仕				//	
								const sint16 红炮_x_红仕_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红仕_黑仕[a];
									  }
								break;
							case RKING:
								break;
							case RPAWN:{   // 红炮 a 红兵 黑仕				//
								const sint16 红炮_x_红兵_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,   16,    16,     8,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_红兵_黑仕[a];
									   }
								break;
								//*****************************************************
							case BCHE: {	// 红炮 a 黑车 黑仕				//
								const sint16 红炮_x_黑车_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,    16,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑车_黑仕[a];
									   }
								break;
							case BMA:{		// 红炮 a 黑马 黑仕				//
								const sint16 红炮_x_黑马_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,   16,    16,    16,	     //红棋 
									 0,
									16,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑马_黑仕[a];
									 }
								break;
							case BPAO:{		// 红炮 a 黑炮 黑仕				//
								const sint16 红炮_x_黑炮_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,   16,    16,    16,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑炮_黑仕[a];
									  }
								break;
							case BXIANG:{  // 红炮 a 黑相 黑仕				//
								const sint16 红炮_x_黑相_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马     车     炮     兵
									 0,    0,    0,   16,   24,    64,    16,	     //红棋 
									 0,
									16,    0,    0,    8,    8,     8,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑相_黑仕[a];
										}
								break;
							case BSHI:{	  // 红炮 a 黑仕 黑仕				//
								const sint16 红炮_x_黑仕_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,   16,   16,    16,    16,	     //红棋 
									 0,
									 0,    0,    0,    8,    8,     8,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑仕_黑仕[a];
									  }
								break;
							case BKING:{
									   }
								break;
							case BPAWN:{	// 红炮 a 黑卒 黑仕				//
								const sint16 红炮_x_黑卒_黑仕[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,   16,   16,    16,    16,	     //红棋 
									 0,
									 0,    0,    0,    8,    8,     8,     0,	     //黑棋
									 
								};
								result += 红炮_x_黑卒_黑仕[a];
									   }
								break;
							default:
								break;
						}
						}
						break;
					// 第三个棋子是  红炮 a b 黑将,   这是中炮或底炮, 已在KINGSAFE中有表示了
					case BKING:  {                 // **********************************************************************************************
						//result += RpaoAttScore(a,b);
						// 在这判断一下牵制将的情况
						switch(b){	
							case RCHE:{		// 红炮 a 红车 黑将				//这个不太可能
								const sint16 Rpao_x_Rche_Bking[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,    0,    0,    0,    0,     0,     0,	     //红棋 
									 0,
									 0,    0,    0,    0,    0,     0,     0,	     //黑棋
									 
								};
								result += Rpao_x_Rche_Bking[a];
							  }
								break;
							case RMA:{      // 红炮 a 红马 黑将				
								const sint16 Rpao_x_Rma_Bking[16] = {		
									//
									 0,
									//将   仕    相    马    车     炮     兵
									 0,   64,   64,   96,  118,    0,    64,	     //红棋 
									 0,
									 0,   64,   96,   48,   64,    64,    64,	     //黑棋
									 
								};
								result += Rpao_x_Rma_Bking[a];
									 }
								break;
							case RPAO: {	 // 红炮 a 红炮 黑将	
								const sint16 Rpao_x_Rpao_Bking[16] = {		
									//
									 0,
									//将   仕    相     马    车      炮    兵
									 16,   64,   64,   96,  168,     0,  128,	     //红棋 
									 0,
									 0,    64,   64,   96,  196,    32,   80,	     //黑棋
									 
								};
								result += Rpao_x_Rpao_Bking[a];
									   }
								break;
							case RXIANG:{	// 红炮 a 红相 黑将
								const sint16 Rpao_x_Rxiang_Bking[16] = {		
									//
									 0,
									//将   仕    相   马    车     炮     兵
									 16,   16,   0,   32,   32,     0,     0,	     //红棋 
									 0,
									 0,     0,   0,   32,   32,    32,     0,	     //黑棋
									 
								};
								result += Rpao_x_Rxiang_Bking[a];
										}
								break;
							case RSHI:{ // 红炮 a 红仕 黑将
								const sint16 Rpao_x_Rshi_Bking[16] = {		
									//
									 0,
									//将   仕    相   马    车     炮     兵
									 16,    0,   0,   32,   32,     0,     0,	     //红棋 
									 0,
									 0,     0,   0,   32,   32,    32,     0,	     //黑棋
									 
								};
								result += Rpao_x_Rshi_Bking[a];
									  }
								break;
							case RKING:{
									   }
								break;
							case RPAWN:{  // 红炮 a 红兵 黑将
								const sint16 Rpao_x_Rpawn_Bking[16] = {		
									//
									 0,
									//将   仕    相   马    车     炮     兵
									 16,   32,   32,  64,   96,     0,    32,	     //红棋 
									 0,
									  0,   16,   16,  32,   32,    32,     0,	     //黑棋
									  
								};
								result += Rpao_x_Rpawn_Bking[a];
									   }
								break;
						//*****************************************************
							case BCHE:{  // 红炮 a 黑车 黑将
								const sint16 Rpao_x_Bche_Bking[16] = {		
									//
									 0,
									//将   仕    相   马    车     炮     兵
									  0,  128,  128, 128,  128,     0,   128,	     //红棋 
									  0,
									  0,  128,  128, 128,  168,   128,    96,	     //黑棋
									  
								};
								result += Rpao_x_Bche_Bking[a];
									  }
								break;
							case BMA:{  // 红炮 a 黑马 黑将                         //可抽将
								const sint16 Rpao_x_Bma_Bking[16] = {		
									//
									  0,
									 //将   仕    相   马    车     炮     兵
									  0,   96,   96,  96,  128,    0,    96,	     //红棋
									  0,
									 32,   80,  164, 196,  196,   168,    96,	     //黑棋
									  
								};
								result += Rpao_x_Bma_Bking[a];
									 }
								break;
							case BPAO: {  // 红炮 a 黑炮 黑将
								const sint16 Rpao_x_Bpao_Bking[16] = {		
									//
									 0,
									//将   仕    相   马    车     炮     兵
									  0,    0,    0,  64,  118,    0,    0,	     //红棋 
									  0,
									  0,    0,    0,  64,   96,  -16,    0,	     //黑棋
									  
								};
								result += Rpao_x_Bpao_Bking[a];
									   }
								break;
							case BXIANG:{  // 红炮 a 黑相 黑将
								const sint16 Rpao_x_Bxiang_Bking[16] = {		
									//
									 0,
									 //将   仕    相   马    车     炮     兵
									  16,  16,   16,  96,  148,   196,    32,	     //红棋 
									  0,
									  0,    0,    0,  80,   96,    16,   -32,	     //黑棋
									  
								};
								result += Rpao_x_Bxiang_Bking[a];
										}
								break;
							case BSHI:{   // 红炮 a 黑仕 黑将
								const sint16 Rpao_x_Bshi_Bking[16] = {		
									 //
									  0,
									 //将   仕    相   马    车    炮     兵
									  16,  16,   16,  96,  96,  196,    16,	     //红棋 
									  0,
									  0,    0,   16,  80,  96,   72,   -32,	     //黑棋, 中炮的基本分
									  
								};
								result += Rpao_x_Bshi_Bking[a];
									  }
								break;
							case BKING:
								break;
							case BPAWN:{ // 红炮 a 黑卒 黑将
								const sint16 Rpao_x_Bpawn_Bking[16] = {		
									//
									 0,
									//将    仕    相   马     车     炮     兵
									  16,  16,   16,  80,   96,    0,     0,	     //红棋 
									  0,
									  0,    0,    0,  64,   96,   64,     0,	     //黑棋
									  
								};
								result += Rpao_x_Bpawn_Bking[a];
									   }
								break;
							default:
								break;
						}
						}
						break;
					// 第三个棋子是  红炮 a b 黑兵 // **********************************************************************************************
					case BPAWN: {
						//result += RpaoAttScore(a,b);
						switch(b){
							case RCHE:   {  // 红炮 a 红车 黑兵  //  //////////////////////////////////////////////
								const sint16 Rpao_x_Rche_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,    16,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Rche_Bpawn[a];
										 }						
								break;
							case RMA:{      // 红炮 a 红马 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Rma_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,    16,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Rma_Bpawn[a];
									 }
								break;
							case RPAO:{		// 红炮 a 红炮 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Rpao_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,     0,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Rpao_Bpawn[a];
									  }
								break;
							case RXIANG:{	// 红炮 a 红相 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Rxiang_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,     8,     0,	     //红棋 
									0,
									0,   0,    0,  64,   0,    64,     0,	     //黑棋
									
								};
								//fen 2ba5/4ak3/1cN1b2P1/9/P8/2B6/4N4/9/2nKA4/9 b - - 0 0
								result += Rpao_x_Rxiang_Bpawn[a];
										}
								break;
							case RSHI:{		// 红炮 a 红仕 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Rshi_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,     0,     0,	     //红棋 
									0,
									0,   0,    0,  64,   0,    64,     0,	     //黑棋
									
								};
								result += Rpao_x_Rshi_Bpawn[a];
									  }
								break;
							case RKING:	{	// 红炮 a 红将 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Rking_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,     0,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Rking_Bpawn[a];
										}
								break;
							case RPAWN: {	// 红炮 a 红兵 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Rpawn_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    8,   8,   0,    16,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Rpawn_Bpawn[a];
										}
								break;
								//*****************************************************
							case BCHE:{		// 红炮 a 黑车 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Bche_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,     0,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Bche_Bpawn[a];
									  }
								break;
							case BMA:{		// 红炮 a 黑马 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Bma_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   16,    8,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Bma_Bpawn[a];
									 }
								break;
							case BPAO:{		// 红炮 a 黑炮 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Bpao_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,     0,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Bpao_Bpawn[a];
									  }
								break;
							case BXIANG:{  // 红炮 a 黑象 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Bxiang_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,    16,     8,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Bxiang_Bpawn[a];
										}
								break;
							case BSHI:{		// 红炮 a 黑仕 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Bshi_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,   0,     0,     0,	     //红棋
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Bshi_Bpawn[a];
									  }
								break;
							case BKING:{	// 红炮 a 黑将 黑兵 //  //////////////////////////////////////////////
									   }
								break;
							case BPAWN:{	// 红炮 a 黑兵 黑兵 //  //////////////////////////////////////////////
								const sint16 Rpao_x_Bshi_Bpawn[16] = {		
								 //
									0,
								 //将   仕    相   马    车     炮     兵
									0,   0,    0,   0,  16,     0,     0,	     //红棋 
									0,
									0,   0,    0,   0,   0,     0,     0,	     //黑棋
									
								};
								result += Rpao_x_Bshi_Bpawn[a];
									   }
								break;
							default:
								break;
						}
						}
						break;
					default:
						break;
				}

				R_PaoThree[a][b][c] = result;				
			}
		}
	}

	for(a = 0; a < 16; a++){
		for(b = 0; b < 16; b++){
			for(c = 0; c < 16; c++){
				//最后相反一下就行了 revertChess
				
				//if(c != 0){
				//	R_PaoThree[a][b][c] -= R_PaoThree[a][b][0];   // 去了三个子的二个的分
				//}
				B_PaoThree[a][b][c] = R_PaoThree[revertChess[a]][revertChess[b]][revertChess[c]];
			}
		}
	}
	//a = R_PaoThree[7][7][7];
	//a = B_PaoThree[15][15][15];
	//a = b;
}

*/

//typedef enum
//{
//	EMPTY=0,  // 这个不用了
//	RKING=1,  RSHI=2, RXIANG=3, RMA=4, RCHE=5, RPAO=6, RPAWN=7,
//	_X_X =8,
//	BKING=9,  BSHI=10,BXIANG=11,BMA=12,BCHE=13,BPAO=14,BPAWN=15,   
//} enum_chess_piece;